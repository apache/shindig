/**
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @fileoverview Representation of an activity.
 */


/**
 * @class
 * Base interface for all activity objects.
 *
 * <p>
 * <b>See also:</b>
 * <a href="opensocial.html#newActivity">opensocial.newActivity()</a>,
 * <a href="opensocial.html#requestCreateActivity">
 * opensocial.requestCreateActivity()</a>
 *
 * @name opensocial.Activity
 */


/**
 * Base interface for all activity objects.
 *
 * @param {opensocial.Activity.Template || String} title The title of an
 *     activity; a template is recommended, but this field can also be a
 *     string.
 * @param {Map.<opensocial.Activity.Field, Object>} opt_params Any other
 *    fields that should be set on the activity object. All of the defined
 *    Fields are supported.
 * @private
 * @constructor
 */
opensocial.Activity = function(title, opt_params) {
  this.fields_ = opt_params || {};
  this.fields_[opensocial.Activity.Field.TITLE] = title;
};


/**
 * @static
 * @class
 * All of the fields that activities can have.
 *
 * <p>
 * <b>See also:</b>
 * <a
 * href="opensocial.Activity.html#getField">opensocial.Activity.getField()</a>
 * </p>
 *
 * @name opensocial.Activity.Field
 */
opensocial.Activity.Field = {
  /**
   * A string ID
   * that can be permanently associated with this activity.
   * @member opensocial.Activity.Field
   */
  ID : 'id',

  /**
   * A string ID
   * associated with this activity that was generated by the
   * posting app externally.
   * @member opensocial.Activity.Field
   */
  EXTERNAL_ID : 'externalId',

  /**
   * The string ID of the user who this activity is for.
   * @member opensocial.Activity.Field
   */
  USER_ID : 'userId',

  /**
   * A string specifying the application that this activity is associated with.
   * @member opensocial.Activity.Field
   */
  APP_ID : 'appId',

  /**
   * A string specifing the title of the stream.
   * @member opensocial.Activity.Field
   */
  STREAM_TITLE : 'streamTitle',

  /**
   * A string specifying the stream's URL.
   * @member opensocial.Activity.Field
   */
  STREAM_URL : 'streamUrl',

  /**
   * A string specifying the stream's source URL.
   * @member opensocial.Activity.Field
   */
  STREAM_SOURCE_URL : 'streamSourceUrl',

  /**
   * A string specifying the URL for the stream's favicon.
   * @member opensocial.Activity.Field
   */
  STREAM_FAVICON_URL : 'streamFaviconUrl',

  /**
   * A string specifying the title of an activity;
   * the only field that is guaranteed
   * to display when rendering.
   * @member opensocial.Activity.Field
   */
  TITLE : 'title',

  /**
   * A string specifying the full text of an activity.
   * @member opensocial.Activity.Field
   */
  BODY : 'body',

  /**
   * A string specifying the
   * URL that represents this activity.
   * @member opensocial.Activity.Field
   */
  URL : 'url',

  /**
   * Any photos, videos, or images that should be associated
   * with the activity. Higher priority ones are higher in the list.
   * The data has type <code>Array&lt;
   * <a href="opensocial.Activity.MediaItem.html">MediaItem</a>&gt;</code>.
   * @member opensocial.Activity.Field
   */
  MEDIA_ITEMS : 'mediaItems',

  /**
   * A string specifying the time at which this activity took place
   * in milliseconds since the epoch.
   * @member opensocial.Activity.Field
   */
  POSTED_TIME : 'postedTime',

  /**
   * A map of custom keys to values associated with this activity.
   * @private - not supported until templates exist
   * The data has type <code>Map&lt;String, String&gt;</code>.
   * @member opensocial.Activity.Field
   */
  CUSTOM_VALUES : 'customValues'
};


/**
 * Gets an ID that can be permanently associated with this activity.
 *
 * @return {String} The ID
 * @member opensocial.Activity
 */
opensocial.Activity.prototype.getId = function() {
  return this.getField(opensocial.Activity.Field.ID);
};


/**
 * Gets the activity data that's associated with the specified key.
 *
 * @param {String} key The key to get data for;
 *   see the <a href="opensocial.Activity.Field.html">Field</a> class
 * for possible values
 * @return {String} The data
 * @member opensocial.Activity
 */
opensocial.Activity.prototype.getField = function(key) {
  return this.fields_[key];
};


/**
 * Sets data for this activity associated with the given key.
 *
 * @param {String} key The key to set data for
 * @param {String} data The data to set
 */
opensocial.Activity.prototype.setField = function(key, data) {
  return this.fields_[key] = data;
};


/**
 * @class
 * A media item associated with an activity.
 * Represents images, movies, and audio.
 * Create a <code>MediaItem</code> object using the
 * <a href="opensocial.html#newActivityMediaItem">
 * opensocial.newActivityMediaItem()</a> method.
 *
 * @name opensocial.Activity.MediaItem
 */

/**
 * A media item associated with an activity. Represents images, movies, and
 * audio.
 *
 * @param {String} mimetype The media's type
 * @param {String} url The media's location
 * @param {Map.<opensocial.Activity.MediaItem.Field, Object>} opt_params
 *    Any other fields that should be set on the media item object.
 *    All of the defined Fields are supported.
 * @constructor
 * @private
 */
opensocial.Activity.MediaItem = function(mimeType, url, opt_params) {
  this.fields_ = opt_params || {};
  this.fields_[opensocial.Activity.MediaItem.Field.MIME_TYPE] = mimeType;
  this.fields_[opensocial.Activity.MediaItem.Field.URL] = url;
};


/**
 * @static
 * @class
 * The possible types of media items.
 *
 * <p>
 * <b>See also:</b>
 * <a href="opensocial.Activity.MediaItem.Field.html">
 * opensocial.Activity.MediaItem.Field</a>
 * </p>
 *
 * @name opensocial.Activity.MediaItem.Type = {
 */
opensocial.Activity.MediaItem.Type = {
  /** @member opensocial.Activity.MediaItem.Type */
  IMAGE : 'image',
  /** @member opensocial.Activity.MediaItem.Type */
  VIDEO : 'video',
  /** @member opensocial.Activity.MediaItem.Type */
  AUDIO : 'audio'
}


/**
 * @static
 * @class
 * All of the fields that media items have.
 *
 * <p>
 * <b>See also:</b>
 * <a href="opensocial.Activity.MediaItem.html#getField">
 * opensocial.Activity.MediaItem.getField()</a>
 * </p>
 *
 * @name opensocial.Activity.MediaItem.Field
 */
opensocial.Activity.MediaItem.Field = {
  /**
   * The type of media, specified as a
   * <a href="opensocial.Activity.MediaItem.Type.html">
   * <code>MediaItem.Type</code></a> object.
   * @member opensocial.Activity.MediaItem.Field
   */
  TYPE : 'type',

  /**
   * The MIME type of media, specified as a String.
   * @member opensocial.Activity.MediaItem.Field
   */
  MIME_TYPE : 'mimeType',

  /**
   * A string specifying the URL where the media can be found.
   * @member opensocial.Activity.MediaItem.Field
   */
  URL : 'url'
};


/**
 * Gets the media item data that's associated with the specified key.
 *
 * @param {String} key The key to get data for; see the
 *   <a href="opensocial.Activity.MediaItem.Field.html">Field</a> class
 *   for possible values
 * @return {String} The data
 */
opensocial.Activity.MediaItem.prototype.getField = function(key) {
  return this.fields_[key];
};


/**
 * Sets data for this media item associated with the given key.
 *
 * @param {String} key The key to set data for
 * @param {String} data The data to set
 */
opensocial.Activity.MediaItem.prototype.setField = function(key, data) {
  return this.fields_[key] = data;
};
