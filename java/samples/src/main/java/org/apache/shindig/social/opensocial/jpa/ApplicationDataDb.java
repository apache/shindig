/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */
package org.apache.shindig.social.opensocial.jpa;

import static javax.persistence.GenerationType.IDENTITY;

import org.apache.shindig.social.opensocial.jpa.api.DbObject;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.MapKey;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Version;

import java.util.Map;

/**
 * Represents application data. 
 */
@Entity
@Table(name="application_data")
public class ApplicationDataDb implements DbObject {
  /**
   * The internal object ID used for references to this object. Should be generated by the
   * underlying storage mechanism
   */
  @Id
  @GeneratedValue(strategy = IDENTITY)
  @Column(name = "oid")
  protected long objectId;

  /**
   * An optimistic locking field.
   */
  @Version
  @Column(name = "version")
  protected long version;
  
  /**
   * Application data is associated with an application
   */
  @ManyToOne(targetEntity=ApplicationDb.class)
  @JoinColumn(name="application_id", referencedColumnName="oid")
  protected ApplicationDb application;
  
  /**
   * There is a map of sets of values within an application (question, what are they mapped on ?) 
   * If this is userID we may have this mapping wrong as we certainly dont want to load all data
   * for all users to access a single users set of data. Need to check this.
   * TODO: check what the key really is.
   */
  @OneToMany(targetEntity=ApplicationDataMapDb.class, mappedBy="applicationData")
  @MapKey(name="name")
  protected Map<String, Map<String, String>> entry;

  /**
   * @return the application
   */
  public ApplicationDb getApplication() {
    return application;
  }

  /**
   * @param application the application to set
   */
  public void setApplication(ApplicationDb application) {
    this.application = application;
  }

  /**
   * @return the entry
   */
  public Map<String, Map<String, String>> getEntry() {
    return entry;
  }

  /**
   * @param entry the entry to set
   */
  public void setEntry(Map<String, Map<String, String>> entry) {
    this.entry = entry;
  }

  /**
   * @return the objectId
   */
  public long getObjectId() {
    return objectId;
  }

  /**
   * @return the version
   */
  public long getVersion() {
    return version;
  }

}
